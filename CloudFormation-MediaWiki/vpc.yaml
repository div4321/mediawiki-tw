---
AWSTemplateFormatVersion: 2010-09-09
Description:
  This CloudFormation performs all the necessary steps to create and configure networking componenets of a VPC
  within the account.

Parameters:
  VpcCidr:
    Description: The cidr for the VPC
    Type: String
    Default: 10.150.0.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/24)$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/24
  AppName:
    Type: String
    MaxLength: 4
    Description: Add four alphabet word which reperesent the application hosted on EC2
    ConstraintDescription: Must be meaningful & in lowercase and not more than 4 alphabets

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - 
          Key: Name
          Value: !Sub
            - vpc-${App}
            - { App: !Ref AppName}

  ### Gateways
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: Vpc
    Properties:
      Tags:
      -
        Key: Name
        Value: !Join
          - "-"
          -
            - "igw"
            - !Sub
              - vpc-${App}
              - { App: !Ref AppName}
    
  InternetGatewayAttachment:
    DependsOn: InternetGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  ### Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [0, !Cidr [!GetAtt Vpc.CidrBlock, 8, 5]]
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: yes
      Tags:
        - 
          Key: Name
          Value:  !Join
            - "-"
            -
              - "sub-pub"
              - !Sub
                - vpc-${App}
                - { App: !Ref AppName }
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [1, !Cidr [!GetAtt Vpc.CidrBlock, 8, 5]]
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
        - 
          Key: Name
          Value:  !Join
            - "-"
            -
              - "sub-pvt"
              - !Sub
                - vpc-${App}
                - { App: !Ref AppName} 
  

  ### Route Tables
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - 
          Key: Name
          Value:  !Join
            - "-"
            -
              - "rt"
              - !Sub
                - vpc-${App}
                - { App: !Ref AppName}
              - pvt
  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - 
          Key: Name
          Value:  !Join
            - "-"
            -
              - "rt"
              - !Sub
                - vpc-${App}
                - { App: !Ref AppName}
              - pub
    
  InternalPrivateRouteInternet:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  ### Subnet RouteTable Association
  PvtSubRtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB
  PubSubRtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PublicSubnetA

 ### NACL Creation
  PvtNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags:
        -
          Key: Name
          Value: !Sub
            - nacl-vpc-${App}-pvt
            - { App: !Ref AppName }
  PubNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags:
        -
          Key: Name
          Value: !Sub
            - nacl-vpc-${App}-pub
            - { App: !Ref AppName }
  
  ### NACL Inbound & Outbound Rules
  PvtNACLAssocInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidr
      NetworkAclId: !Ref PvtNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
  PvtNACLAssocOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      CidrBlock: !Ref VpcCidr
      NetworkAclId: !Ref PvtNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
  PubNACLAssocInboundIntr:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidr
      NetworkAclId: !Ref PubNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
  PubNACLAssocInboundSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PubNACL
      RuleNumber: 200
      Protocol: 6
      PortRange:
         From: 22
         To: 22
      RuleAction: allow
  PubNACLAssocInboundHTML:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PubNACL
      RuleNumber: 300
      Protocol: 6
      PortRange:
         From: 80
         To: 80
      RuleAction: allow
  PubNACLAssocInboundEPH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PubNACL
      RuleNumber: 400
      Protocol: 6
      PortRange:
         From: 32768
         To: 61000
      RuleAction: allow    
  PubNACLAssocOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PubNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow

### NACL-Subnet Association
  PvtSubNACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn: PvtNACL
    Properties: 
      NetworkAclId: !Ref PvtNACL
      SubnetId: !Ref PrivateSubnetB
  PubSubNACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn: PubNACL
    Properties: 
      NetworkAclId: !Ref PubNACL
      SubnetId: !Ref PublicSubnetA
  

Outputs:
  VpcId:
    Description: The Id for the VPC
    Value: !Ref Vpc
  VpcCidr:
    Description: The CIDR range for the VPC
    Value: !GetAtt Vpc.CidrBlock
    Export:
      Name: !Sub "${AWS::StackName}-VpcCidr"
  PubSubnetId:
    Description: Pub Subnet IDs for VPC
    Value: !Ref PublicSubnetA
  PvtSubnetId:
    Description: Pub Subnet IDs for VPC
    Value: !Ref PrivateSubnetB    
  PubSubnetAz:
    Description: Availability Zones for PubSubnet
    Value: !GetAtt PublicSubnetA.AvailabilityZone
  PvtSubnetAz:
    Description: Availability Zones for PvtSubnet
    Value: !GetAtt PrivateSubnetB.AvailabilityZone
...  